<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://numisveinsson.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://numisveinsson.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-02-09T02:48:17+00:00</updated><id>https://numisveinsson.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Python 101 (2) Using Git</title><link href="https://numisveinsson.github.io/blog/2024/git/" rel="alternate" type="text/html" title="Python 101 (2) Using Git"/><published>2024-01-02T00:00:00+00:00</published><updated>2024-01-02T00:00:00+00:00</updated><id>https://numisveinsson.github.io/blog/2024/git</id><content type="html" xml:base="https://numisveinsson.github.io/blog/2024/git/"><![CDATA[<h1 id="getting-started-with-git-for-code-development">Getting Started with Git for Code Development</h1> <p>Git is a powerful version control system that helps developers manage and track changes in their codebase efficiently. Whether you’re working on a solo project or collaborating with a team, understanding the basics of Git is essential. In this blog post, we’ll cover the fundamental aspects of using Git for code development.</p> <h3 id="what-is-git">What is Git?</h3> <p>Git is a distributed version control system that allows developers to track changes in their codebase. It provides a reliable way to collaborate with others, revert to previous states, and manage multiple versions of a project simultaneously.</p> <h3 id="setting-up-git">Setting Up Git</h3> <p>Before you start using Git, make sure it’s installed on your machine. You can download and install Git from the <a href="https://git-scm.com/">official Git website</a>.</p> <p>Once installed, configure your identity using the following commands:</p> <d-code block="" language="bash"> git config --global user.name "Your Name" git config --global user.email "your.email@example.com" </d-code> <p>Replace “Your Name” and “your.email@example.com” with your name and email address.</p> <h3 id="initializing-a-git-repository">Initializing a Git Repository</h3> <p>To start using Git in a project, you need to initialize a Git repository. Navigate to your project directory in the terminal and run:</p> <d-code block="" language="bash"> git init </d-code> <p>This command initializes a new Git repository in your project folder.</p> <h3 id="staging-changes">Staging Changes</h3> <p>Git has a staging area that allows you to select which changes to include in the next commit. Use the following commands to stage your changes:</p> <d-code block="" language="bash"> git add filename # Stage a specific file git add . # Stage all changes </d-code> <h3 id="committing-changes">Committing Changes</h3> <p>Once you’ve staged your changes, commit them to the repository:</p> <d-code block="" language="bash"> git commit -m "Your commit message here" </d-code> <p>Write a meaningful commit message describing the changes you made.</p> <h3 id="checking-repository-status">Checking Repository Status</h3> <p>To check the status of your repository and see which files have been modified, added, or deleted, use:</p> <d-code block="" language="bash"> git status </d-code> <h3 id="viewing-commit-history">Viewing Commit History</h3> <p>Reviewing the commit history is essential for tracking changes. Use the following command to view a list of commits:</p> <d-code block="" language="bash"> git log </d-code> <p>This will display a detailed log of all commits.</p> <h3 id="branching-in-git">Branching in Git</h3> <p>Branching is a powerful feature in Git that allows you to work on different features or bug fixes simultaneously. Create a new branch with:</p> <d-code block="" language="bash"> git branch branch_name </d-code> <p>Switch to the new branch:</p> <d-code block="" language="bash"> git checkout branch_name </d-code> <p>Or, combine both commands using:</p> <d-code block="" language="bash"> git checkout -b new_branch </d-code> <h3 id="merging-branches">Merging Branches</h3> <p>After working on a branch, you may want to merge it back into the main branch. Use the following commands:</p> <d-code block="" language="bash"> git checkout main # Switch to the main branch git merge branch_name # Merge the specified branch into main </d-code> <h3 id="conclusion">Conclusion</h3> <p>These are the most basic aspects of using Git for code development. As you become more familiar with Git, you can explore advanced features like Git remote, Git pull, and Git push. Remember to refer to the <a href="https://git-scm.com/doc">official Git documentation</a> for more in-depth information and guidance. Happy coding!</p>]]></content><author><name>Numi Sveinsson Cepero</name></author><category term="python"/><summary type="html"><![CDATA[using git to manage code development]]></summary></entry><entry><title type="html">Python 101 (1) Env Setup</title><link href="https://numisveinsson.github.io/blog/2023/conda/" rel="alternate" type="text/html" title="Python 101 (1) Env Setup"/><published>2023-12-22T00:00:00+00:00</published><updated>2023-12-22T00:00:00+00:00</updated><id>https://numisveinsson.github.io/blog/2023/conda</id><content type="html" xml:base="https://numisveinsson.github.io/blog/2023/conda/"><![CDATA[<h2 id="setting-up-a-python-environment-with-conda">Setting Up a Python Environment with Conda</h2> <p>Conda is a powerful package management and environment management system that makes it easy to manage Python environments and dependencies. Before we dive into using Conda, let’s understand the concept of a Python virtual environment.</p> <h2 id="what-is-a-python-virtual-environment">What is a Python Virtual Environment?</h2> <p>A Python virtual environment is a self-contained directory that contains its own Python interpreter and library installations. It allows you to isolate projects and their dependencies, preventing conflicts between different projects that may require different versions of packages.</p> <h2 id="why-use-conda">Why Use Conda?</h2> <p>Conda provides a convenient way to create, manage, and switch between Python environments. Here are some reasons why Conda is preferred:</p> <ul> <li><strong>Cross-Platform:</strong> Conda works seamlessly across different operating systems, making it easy to share environments and collaborate on projects.</li> <li><strong>Package Management:</strong> Conda simplifies package management by handling dependencies and ensuring compatibility between packages.</li> <li><strong>Ecosystem Support:</strong> Conda supports a wide range of packages and is not limited to Python. It can manage environments for different programming languages.</li> </ul> <h2 id="step-1---install-conda">Step 1 - Install Conda</h2> <p>If you haven’t installed Conda yet, you can download and install it by following the instructions on the <a href="https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html">official Conda website</a>.</p> <h2 id="step-2---open-a-terminal-or-command-prompt">Step 2 - Open a Terminal or Command Prompt</h2> <p>Open a terminal or command prompt on your system. This is where you will enter the Conda commands to create and manage Python environments.</p> <h2 id="step-3---create-a-new-python-environment">Step 3 - Create a New Python Environment</h2> <p>To create a new Python environment, use the following command:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">conda</span> <span class="nx">create</span> <span class="o">--</span><span class="nx">name</span> <span class="nx">myenv</span> <span class="nx">python</span><span class="o">=</span><span class="mf">3.8</span></code></pre></figure> <h2 id="step-4---activate-the-environment">Step 4 - Activate the Environment</h2> <p>Activate the newly created environment using the following command:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">conda</span> <span class="nx">activate</span> <span class="nx">myenv</span></code></pre></figure> <h2 id="step-5---install-packages-eg-pytorch">Step 5 - Install Packages (e.g., PyTorch)</h2> <p>Install packages into the newly created environment using, for example, the following command:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">conda</span> <span class="nx">install</span> <span class="nx">pytorch</span> <span class="nx">torchvision</span> <span class="nx">torchaudio</span> <span class="nx">cudatoolkit</span><span class="o">=</span><span class="mf">10.2</span> <span class="o">-</span><span class="nx">c</span> <span class="nx">pytorch</span></code></pre></figure> <h2 id="step-6---view-environments">Step 6 - View Environments</h2> <p>See all your environments using the following command:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">conda</span> <span class="nx">info</span> <span class="o">--</span><span class="nx">envs</span></code></pre></figure> <h2 id="step-7---deactivate-environment">Step 7 - Deactivate Environment</h2> <p>When you’re done working in the environment, deactivate it using the following command:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">conda</span> <span class="nx">deactivate</span></code></pre></figure> <p>That’s it! You’ve now covered the steps to activate, install packages, view/manage environments, and deactivate a Python environment using Conda. Feel free to use and customize this guide based on your specific needs.</p>]]></content><author><name>Numi Sveinsson Cepero</name></author><category term="python"/><summary type="html"><![CDATA[setting up a python conda environment]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://numisveinsson.github.io/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post"/><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://numisveinsson.github.io/blog/2021/distill</id><content type="html" xml:base="https://numisveinsson.github.io/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="interactive-plots">Interactive Plots</h2> <p>You can add interative plots using plotly + iframes :framed_picture:</p> <div class="l-page"> <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>The plot must be generated separately and saved into an HTML file. To generate the plot that you see above, you can use the following code snippet:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
  <span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
  <span class="n">df</span><span class="p">,</span>
  <span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
  <span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
  <span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
  <span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <hr/> <h2 id="details-boxes">Details boxes</h2> <p>Details boxes are collapsible boxes which hide additional information from the user. They can be added with the <code class="language-plaintext highlighter-rouge">details</code> liquid tag:</p> <details><summary>Click here to know more</summary> <p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p> </details> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li>Unordered list can use asterisks</li> <li>Or minuses</li> <li>Or pluses</li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><category term="distill"/><category term="formatting"/><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry></feed>