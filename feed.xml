<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://numisveinsson.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://numisveinsson.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-09-24T22:41:57+00:00</updated><id>https://numisveinsson.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">ParaView Tutorial</title><link href="https://numisveinsson.github.io/blog/2024/paraview/" rel="alternate" type="text/html" title="ParaView Tutorial"/><published>2024-09-24T00:00:00+00:00</published><updated>2024-09-24T00:00:00+00:00</updated><id>https://numisveinsson.github.io/blog/2024/paraview</id><content type="html" xml:base="https://numisveinsson.github.io/blog/2024/paraview/"><![CDATA[<h3 id="data-visualization">Data Visualization</h3> <p>Data visualization is an essential tool for scientists and engineers to explore and communicate complex data. Visualization allows us to gain insights into our data, identify patterns, and communicate our findings effectively. ParaView is a powerful scientific visualization tool that enables users to visualize and analyze large datasets in 2D and 3D. It supports a wide range of data formats and provides a variety of visualization and analysis tools. Examples of data that can be visualized in ParaView include computational fluid dynamics simulations, geospatial data, medical imaging data, and more.</p> <p>In this tutorial, we’ll cover the basics of using ParaView for scientific visualization. We’ll explore how to load data, visualize data in 2D and 3D, apply filters for data analysis, and export visualizations for publication.</p> <h3 id="what-is-paraview">What is ParaView?</h3> <p>ParaView is an open-source, multi-platform data analysis and visualization application. It is designed to handle large datasets and provides a range of visualization and analysis tools for scientific and engineering applications. ParaView supports a variety of data formats, including structured and unstructured grids, point clouds, and images.</p> <div class="l-body"> <p><img src="/assets/img/paraview.png" alt="ParaView Logo" width="700"/></p> </div> <h3 id="getting-started-with-paraview">Getting Started with ParaView</h3> <p>To get started with ParaView, you can download the latest version of the software from the <a href="https://www.paraview.org/download/">ParaView website</a>. ParaView is available for Windows, macOS, and Linux operating systems. Once you have downloaded and installed ParaView, you can launch the application and start exploring its features.</p> <h3 id="loading-data">Loading Data</h3> <p>ParaView supports a wide range of data formats, including VTK, XML, CSV, and more. To load data into ParaView, follow these steps:</p> <ol> <li>Launch ParaView.</li> <li>Click on the “Open” button in the toolbar.</li> <li>Browse to the location of your data file and select it.</li> <li>Click “OK” to load the data.</li> </ol> <h3 id="visualizing-data">Visualizing Data</h3> <p>Once you have loaded data into ParaView, you can visualize it in 2D and 3D. ParaView provides a variety of visualization options, including contour plots, volume rendering, and streamlines. To visualize data in ParaView, follow these steps:</p> <ol> <li>Select the data you want to visualize in the Pipeline Browser.</li> <li>Click on the “Apply” button in the toolbar to apply the default visualization.</li> <li>Use the Display panel to customize the visualization, such as changing the color map, opacity, and lighting.</li> </ol> <h3 id="filters-and-data-analysis">Filters and Data Analysis</h3> <p>ParaView provides a range of filters for data analysis and manipulation. Filters allow you to extract information from your data, apply transformations, and perform calculations.</p> <p>To apply a filter in ParaView, follow these steps:</p> <ol> <li>Select the data you want to filter in the Pipeline Browser.</li> <li>Click on the “Filters” menu and select the desired filter.</li> <li>Configure the filter parameters in the Properties panel.</li> <li>Click “Apply” to apply the filter to the data.</li> </ol> <h3 id="favorite-filters">Favorite Filters</h3> <p>Some of my favorite filters in ParaView include:</p> <ul> <li><strong>Contour</strong>: Useful for visualizing isocontours of scalar data.</li> <li><strong>Clip</strong>: Great for cutting away parts of the dataset to reveal internal structures.</li> <li><strong>Slice</strong>: Useful for extracting 2D slices from 3D datasets.</li> <li><strong>Threshold</strong>: Handy for filtering data based on scalar values.</li> <li><strong>Stream Tracer</strong>: Useful for visualizing flow fields and streamlines.</li> <li><strong>Glyph</strong>: Great for visualizing vector fields with glyphs.</li> <li><strong>Warp by Scalar</strong>: Useful for deforming the dataset based on scalar values. This is great for visualizing deformation fields.</li> </ul> <h3 id="visualizing-3d-medical-image-data">Visualizing 3D Medical Image Data</h3> <p>ParaView is a powerful tool for visualizing 3D medical image data, such as MRI and CT scans. It provides a range of tools for volume rendering, segmentation, and surface extraction. To visualize 3D medical image data in ParaView, follow these steps:</p> <ol> <li>Load the medical image data into ParaView.</li> <li>Apply a volume rendering filter to visualize the data in 3D.</li> <li>Choose isosurface as blend mode and adjust the opacity and color map.</li> <li>Use the segmentation tools to extract regions of interest.</li> <li>Apply surface extraction filters to create 3D surface meshes.</li> </ol> <h3 id="saving-and-exporting-data">Saving and Exporting Data</h3> <p>Once you have created a visualization in ParaView, you can save it in a variety of formats for publication and sharing. ParaView supports a range of file formats, including images, videos, and 3D models.</p> <p>To save a visualization in ParaView, follow these steps:</p> <ol> <li>Click on the “File” menu and select “Save Screenshot” to save an image of the visualization.</li> <li>Click on the “File” menu and select “Save Animation” to save a video of the visualization.</li> <li>Click on the “File” menu and select “Export Scene” to save the visualization as a ParaView state file.</li> </ol> <h3 id="conclusion">Conclusion</h3> <p>ParaView is a powerful scientific visualization tool that enables users to explore and analyze complex datasets in 2D and 3D. In this tutorial, we covered the basics of using ParaView for data visualization, including loading data, visualizing data, applying filters, and exporting visualizations. ParaView is a versatile tool that is widely used in scientific research, engineering, and data analysis. I hope this tutorial has provided you with a solid foundation for using ParaView in your own work. Happy visualizing!</p>]]></content><author><name>Numi Sveinsson Cepero</name></author><category term="data-science"/><summary type="html"><![CDATA[A beginner-friendly tutorial on using ParaView for scientific visualization]]></summary></entry><entry><title type="html">Python 101 (3) Github</title><link href="https://numisveinsson.github.io/blog/2024/github/" rel="alternate" type="text/html" title="Python 101 (3) Github"/><published>2024-03-07T00:00:00+00:00</published><updated>2024-03-07T00:00:00+00:00</updated><id>https://numisveinsson.github.io/blog/2024/github</id><content type="html" xml:base="https://numisveinsson.github.io/blog/2024/github/"><![CDATA[<p>Welcome to part 3 of the Python 101 series! In this post, we’ll cover the basics of using Github to manage code development. Whether you’re working on a solo project or collaborating with a team, understanding the fundamentals of using Github is essential. We’ll cover the following topics:</p> <h3 id="whats-the-difference-between-git-and-github">What’s the Difference Between Git and Github?</h3> <p>We’ve already covered the basics of using Git in a previous post. In summary, Git is a powerful <em>version control system</em> that helps developers manage and track changes in their codebase efficiently. Whether you’re working on a solo project or collaborating with a team, understanding the basics of Git is essential. Github, on the other hand, is a <em>web-based platform that provides hosting for software development and version control</em> using Git. It offers distributed version control and source code management functionality of Git, plus its own features. Github is a popular platform for open-source projects and collaborative development. It provides a range of features, including issue tracking, pull requests, and project management tools.</p> <h3 id="setting-up-a-github-account">Setting Up a Github Account</h3> <p>If you don’t already have a Github account, you can sign up for one at <a href="https://github.com">github.com</a>. Once you have an account, you can create and manage repositories, collaborate with others, and contribute to open-source projects.</p> <h3 id="creating-a-new-repository-on-github">Creating a New Repository on Github</h3> <p>You can create a new repository on Github to host your code and collaborate with others.</p> <p>To create a new repository on Github, follow these steps:</p> <ol> <li>Log in to your Github account.</li> <li>Click on the “+” icon in the top right corner of the page and select “New repository.”</li> <li>Enter a name for your repository, and optionally, a description.</li> <li>Choose whether the repository will be public or private.</li> <li>Select the “Initialize this repository with a README” checkbox.</li> </ol> <h3 id="linking-a-local-repository-to-a-github-repository">Linking a Local Repository to a Github Repository</h3> <p>Once you have created a repository on Github, you can link it to a local repository on your machine. This allows you to push changes from your local repository to the remote repository on Github.</p> <p>To link a local repository to a Github repository, follow these steps:</p> <ol> <li>Open a terminal or command prompt on your local machine.</li> <li>Navigate to the directory where your local repository is located.</li> <li>Run the following command to add the remote repository URL, replacing <code class="language-plaintext highlighter-rouge">&lt;repository_url&gt;</code> with the URL of your Github repository:</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote add origin &lt;repository_url&gt;
</code></pre></div></div> <h3 id="cloning-a-repository">Cloning a Repository</h3> <p>Cloning a repository allows you to create a local copy of a Github repository on your machine. This is useful if you want to work on a project locally, make changes, and then push those changes back to the remote repository on Github.</p> <p>To clone a repository from Github to your local machine, follow these steps:</p> <ol> <li>Navigate to the repository on Github.</li> <li>Click on the “Code” button to reveal the repository URL.</li> <li>Copy the repository URL.</li> <li>Open a terminal or command prompt on your local machine.</li> <li>Navigate to the directory where you want to clone the repository.</li> <li>Run the following command, replacing <code class="language-plaintext highlighter-rouge">&lt;repository_url&gt;</code> with the URL you copied:</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone &lt;repository_url&gt;
</code></pre></div></div> <h3 id="pushing-changes-to-github">Pushing Changes to Github</h3> <p>Once you have made changes to your local repository, you can push those changes to the remote repository on Github.</p> <p>To push changes to Github, follow these steps:</p> <ol> <li>Open a terminal or command prompt on your local machine.</li> <li>Navigate to the directory where your local repository is located.</li> <li>Run the following command to push your changes to the remote repository on Github:</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin master
</code></pre></div></div> <h3 id="pulling-changes-from-github">Pulling Changes from Github</h3> <p>If changes have been made to the remote repository on Github, you can pull those changes to your local repository.</p> <p>To pull changes from Github, follow these steps:</p> <ol> <li>Open a terminal or command prompt on your local machine.</li> <li>Navigate to the directory where your local repository is located.</li> <li>Run the following command to pull changes from the remote repository on Github:</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git pull origin master
</code></pre></div></div> <h3 id="creating-a-pull-request">Creating a Pull Request</h3> <p>If you’re collaborating with others on a project, you can create a pull request to propose changes to the codebase. This allows others to review your changes and merge them into the main codebase.</p> <p>To create a pull request on Github, follow these steps:</p> <ol> <li>Navigate to the repository on Github.</li> <li>Click on the “Pull requests” tab.</li> <li>Click on the “New pull request” button.</li> <li>Select the branch that contains your changes.</li> <li>Review the changes and add a description.</li> <li>Click on the “Create pull request” button.</li> </ol> <h3 id="public-vs-private-repositories">Public vs. Private Repositories</h3> <p>Github allows you to create both public and private repositories. Public repositories are visible to anyone, and anyone can fork and contribute to them. Private repositories, on the other hand, are only visible to you and any collaborators you invite. You can choose the visibility of your repository when creating it on Github.</p> <h3 id="using-github-copilot">Using Github Copilot</h3> <p>Github Copilot is a feature I’ve found very useful. It is an AI-powered code completion tool that helps you write code faster and with fewer errors. It is built on OpenAI’s Codex model and provides intelligent code suggestions based on the context of your code. Github Copilot is available as a Visual Studio Code extension and can be used to write code in a variety of programming languages, including Python.</p> <p><strong>Usage</strong>: I link it to VSCode. It requires internet connection to work.</p> <p><strong>Important Note:</strong> Github Copilot is a powerful tool, but it’s important to review the code suggestions it provides and ensure that they align with your project’s requirements and coding standards.</p> <h3 id="conclusion">Conclusion</h3> <p>That’s it! You’ve now covered the basics of using Github to manage code development. Happy coding!</p>]]></content><author><name>Numi Sveinsson Cepero</name></author><category term="python"/><summary type="html"><![CDATA[using Github to manage code development]]></summary></entry><entry><title type="html">My Most Used Python Packages</title><link href="https://numisveinsson.github.io/blog/2024/py_pckgs/" rel="alternate" type="text/html" title="My Most Used Python Packages"/><published>2024-03-06T00:00:00+00:00</published><updated>2024-03-06T00:00:00+00:00</updated><id>https://numisveinsson.github.io/blog/2024/py_pckgs</id><content type="html" xml:base="https://numisveinsson.github.io/blog/2024/py_pckgs/"><![CDATA[<h3 id="what-kind-of-tasks-do-i-use-python-for">What kind of tasks do I use Python for?</h3> <p>I use Python for a variety of research tasks, including data analysis, machine learning, and scientific computing. My current research involves developing machine learning models for medical image analysis, which requires a combination of medical image processing, deep learning, and graphical visualization. Python is a versatile language that allows me to work across these different domains and integrate various libraries and tools.</p> <p>In this post I will list some of the Python packages that I use most frequently in my research but will leave out the most common ones like <code class="language-plaintext highlighter-rouge">numpy</code>, <code class="language-plaintext highlighter-rouge">pandas</code>, <code class="language-plaintext highlighter-rouge">matplotlib</code>, and <code class="language-plaintext highlighter-rouge">scikit-learn</code>. Those are essential packages, but I want to focus on some of the more specialized packages that I use.</p> <h3 id="1-simpleitk">1: SimpleITK</h3> <p>SimpleITK is a simplified layer built on top of the Insight Segmentation and Registration Toolkit (ITK). It is a powerful and easy-to-use library for medical image analysis and visualization. SimpleITK provides a high-level interface to ITK, allowing users to perform complex image processing tasks with minimal code. I use SimpleITK for loading, processing, and visualizing medical image data, as well as for implementing various image segmentation methods.</p> <p>Here is a code snippet showing how to load and visualize a 3D medical image using SimpleITK:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">SimpleITK</span> <span class="k">as</span> <span class="n">sitk</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="c1"># Load the image
</span><span class="n">image_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">path/to/image.nii.gz</span><span class="sh">'</span>
<span class="n">image</span> <span class="o">=</span> <span class="n">sitk</span><span class="p">.</span><span class="nc">ReadImage</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>

<span class="c1"># Convert the image to a numpy array
</span><span class="n">image_array</span> <span class="o">=</span> <span class="n">sitk</span><span class="p">.</span><span class="nc">GetArrayFromImage</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>

<span class="c1"># Plot the image
</span><span class="n">plt</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">image_array</span><span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="p">:,</span> <span class="p">:],</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">gray</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <h3 id="2-pytorch">2: PyTorch</h3> <p>PyTorch is an open-source machine learning library developed by Facebook’s AI Research lab. It provides a flexible and efficient framework for building and training deep learning models. PyTorch’s dynamic computation graph and automatic differentiation capabilities make it well-suited for research and prototyping. I use PyTorch for developing and training deep learning models for all kinds of tasks, as well as for implementing custom loss functions and optimization algorithms. I used to use TensorFlow, but I have found PyTorch to be easier to use and more flexible.</p> <p>Here is a code snippet showing how to define and train a simple neural network in PyTorch:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">import</span> <span class="n">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>
<span class="kn">import</span> <span class="n">torch.optim</span> <span class="k">as</span> <span class="n">optim</span>

<span class="c1"># Define the neural network
</span><span class="k">class</span> <span class="nc">SimpleNet</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">(</span><span class="n">SimpleNet</span><span class="p">,</span> <span class="n">self</span><span class="p">).</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">fc1</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="mi">784</span><span class="p">,</span> <span class="mi">128</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">fc2</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="nf">view</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">784</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">relu</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">fc1</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">fc2</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">x</span>

<span class="c1"># Create the neural network
</span><span class="n">net</span> <span class="o">=</span> <span class="nc">SimpleNet</span><span class="p">()</span>

<span class="c1"># Define the loss function and optimizer
</span><span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">CrossEntropyLoss</span><span class="p">()</span>
<span class="n">optimizer</span> <span class="o">=</span> <span class="n">optim</span><span class="p">.</span><span class="nc">SGD</span><span class="p">(</span><span class="n">net</span><span class="p">.</span><span class="nf">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">0.001</span><span class="p">,</span> <span class="n">momentum</span><span class="o">=</span><span class="mf">0.9</span><span class="p">)</span>

<span class="c1"># Train the neural network
</span><span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">running_loss</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">data</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">trainloader</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span>
        <span class="n">inputs</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">data</span>
        <span class="n">optimizer</span><span class="p">.</span><span class="nf">zero_grad</span><span class="p">()</span>
        <span class="n">outputs</span> <span class="o">=</span> <span class="nf">net</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span>
        <span class="n">loss</span> <span class="o">=</span> <span class="nf">criterion</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
        <span class="n">loss</span><span class="p">.</span><span class="nf">backward</span><span class="p">()</span>
        <span class="n">optimizer</span><span class="p">.</span><span class="nf">step</span><span class="p">()</span>
        <span class="n">running_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="nf">item</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Epoch </span><span class="si">{</span><span class="n">epoch</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="s">, loss: </span><span class="si">{</span><span class="n">running_loss</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">trainloader</span><span class="p">)</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <h3 id="3-vtk">3: VTK</h3> <p>The Visualization Toolkit (VTK) is an open-source software system for 3D computer graphics, image processing, and visualization. It provides a wide range of tools for creating interactive visualizations of scientific data, including medical images. I use VTK for visualizing 3D medical image data, as well as for creating different representation for geometric data (voxels, meshes, point clouds etc). Since my work involves a lot of 3D medical image data, meshes, and point clouds, VTK is an essential tool for me. For most purposes, I use vtk polydata, which is a data structure that represents a geometric object as well as its associated data.</p> <p>Here is a code snippet showing how to create and visualize a 3D mesh using VTK:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">vtk</span>

<span class="c1"># Create a sphere
</span><span class="n">sphere</span> <span class="o">=</span> <span class="n">vtk</span><span class="p">.</span><span class="nf">vtkSphereSource</span><span class="p">()</span>
<span class="n">sphere</span><span class="p">.</span><span class="nc">SetRadius</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span>

<span class="c1"># Create a mapper
</span><span class="n">mapper</span> <span class="o">=</span> <span class="n">vtk</span><span class="p">.</span><span class="nf">vtkPolyDataMapper</span><span class="p">()</span>
<span class="n">mapper</span><span class="p">.</span><span class="nc">SetInputConnection</span><span class="p">(</span><span class="n">sphere</span><span class="p">.</span><span class="nc">GetOutputPort</span><span class="p">())</span>

<span class="c1"># Create an actor
</span><span class="n">actor</span> <span class="o">=</span> <span class="n">vtk</span><span class="p">.</span><span class="nf">vtkActor</span><span class="p">()</span>
<span class="n">actor</span><span class="p">.</span><span class="nc">SetMapper</span><span class="p">(</span><span class="n">mapper</span><span class="p">)</span>

<span class="c1"># Create a renderer
</span><span class="n">renderer</span> <span class="o">=</span> <span class="n">vtk</span><span class="p">.</span><span class="nf">vtkRenderer</span><span class="p">()</span>
<span class="n">renderer</span><span class="p">.</span><span class="nc">AddActor</span><span class="p">(</span><span class="n">actor</span><span class="p">)</span>
<span class="n">renderer</span><span class="p">.</span><span class="nc">SetBackground</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">)</span>

<span class="c1"># Create a render window
</span><span class="n">render_window</span> <span class="o">=</span> <span class="n">vtk</span><span class="p">.</span><span class="nf">vtkRenderWindow</span><span class="p">()</span>
<span class="n">render_window</span><span class="p">.</span><span class="nc">AddRenderer</span><span class="p">(</span><span class="n">renderer</span><span class="p">)</span>

<span class="c1"># Create an interactor
</span><span class="n">interactor</span> <span class="o">=</span> <span class="n">vtk</span><span class="p">.</span><span class="nf">vtkRenderWindowInteractor</span><span class="p">()</span>
<span class="n">interactor</span><span class="p">.</span><span class="nc">SetRenderWindow</span><span class="p">(</span><span class="n">render_window</span><span class="p">)</span>

<span class="c1"># Start the visualization
</span><span class="n">interactor</span><span class="p">.</span><span class="nc">Start</span><span class="p">()</span>
</code></pre></div></div> <h3 id="4-fenics">4: Fenics</h3> <p>FEniCS is a popular open-source computing platform for solving partial differential equations (PDEs). It provides a flexible and efficient framework for solving a wide range of PDEs, including those arising in fluid dynamics, solid mechanics, and electromagnetics. I use FEniCS for simulating blood flow in patient-specific vascular geometries, as well as for solving various other PDEs in my research. FEniCS provides a high-level interface for defining and solving PDEs, making it easy to implement and test different numerical methods.</p> <p>Here is a code snippet showing how to solve the Poisson equation using FEniCS:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">fenics</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1"># Create a mesh
</span><span class="n">mesh</span> <span class="o">=</span> <span class="nc">UnitSquareMesh</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>

<span class="c1"># Define the function space
</span><span class="n">V</span> <span class="o">=</span> <span class="nc">FunctionSpace</span><span class="p">(</span><span class="n">mesh</span><span class="p">,</span> <span class="sh">'</span><span class="s">P</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="c1"># Define the boundary condition
</span><span class="n">u_D</span> <span class="o">=</span> <span class="nc">Expression</span><span class="p">(</span><span class="sh">'</span><span class="s">1 + x[0]*x[0] + 2*x[1]*x[1]</span><span class="sh">'</span><span class="p">,</span> <span class="n">degree</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">bc</span> <span class="o">=</span> <span class="nc">DirichletBC</span><span class="p">(</span><span class="n">V</span><span class="p">,</span> <span class="n">u_D</span><span class="p">,</span> <span class="sh">'</span><span class="s">on_boundary</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># Define the variational problem
</span><span class="n">u</span> <span class="o">=</span> <span class="nc">TrialFunction</span><span class="p">(</span><span class="n">V</span><span class="p">)</span>
<span class="n">v</span> <span class="o">=</span> <span class="nc">TestFunction</span><span class="p">(</span><span class="n">V</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="nc">Constant</span><span class="p">(</span><span class="o">-</span><span class="mf">6.0</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="nf">dot</span><span class="p">(</span><span class="nf">grad</span><span class="p">(</span><span class="n">u</span><span class="p">),</span> <span class="nf">grad</span><span class="p">(</span><span class="n">v</span><span class="p">))</span><span class="o">*</span><span class="n">dx</span>
<span class="n">L</span> <span class="o">=</span> <span class="n">f</span><span class="o">*</span><span class="n">v</span><span class="o">*</span><span class="n">dx</span>

<span class="c1"># Compute the solution
</span><span class="n">u</span> <span class="o">=</span> <span class="nc">Function</span><span class="p">(</span><span class="n">V</span><span class="p">)</span>
<span class="nf">solve</span><span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">L</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">bc</span><span class="p">)</span>

<span class="c1"># Plot the solution
</span><span class="nf">plot</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
</code></pre></div></div> <h3 id="5-opencv">5: OpenCV</h3> <p>OpenCV is an open-source computer vision and machine learning software library. It provides a wide range of tools for image processing, computer vision, and machine learning. I use OpenCV for various image processing tasks, such as image denoising, feature detection, and object tracking.</p> <p>Here is a code snippet showing how to denoise an image using OpenCV:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">cv2</span>

<span class="c1"># Read the image
</span><span class="n">image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="sh">'</span><span class="s">path/to/image.jpg</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># Convert the image to grayscale
</span><span class="n">gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>

<span class="c1"># Denoise the image
</span><span class="n">denoised</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">fastNlMeansDenoising</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="n">h</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">templateWindowSize</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span> <span class="n">searchWindowSize</span><span class="o">=</span><span class="mi">21</span><span class="p">)</span>

<span class="c1"># Display the original and denoised images
</span><span class="n">cv2</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="sh">'</span><span class="s">Original</span><span class="sh">'</span><span class="p">,</span> <span class="n">gray</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="sh">'</span><span class="s">Denoised</span><span class="sh">'</span><span class="p">,</span> <span class="n">denoised</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="nf">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="nf">destroyAllWindows</span><span class="p">()</span>
</code></pre></div></div> <h3 id="6-vmtk">6: VMTK</h3> <p>The Vascular Modeling Toolkit (VMTK) is an open-source software system for 3D geometric modeling of blood vessels. It provides a wide range of tools for processing and analyzing medical image data, as well as for creating patient-specific vascular models. I use VMTK for extracting and processing blood vessel geometries from medical image data, as well as for creating different representations of vascular structures.</p> <p>Here is a code snippet showing how to extract the centerline of a blood vessel using VMTK:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">vmtk</span> <span class="kn">import</span> <span class="n">vmtkscripts</span>

<span class="c1"># Load the mesh
</span><span class="n">reader</span> <span class="o">=</span> <span class="n">vmtkscripts</span><span class="p">.</span><span class="nf">vmtkSurfaceReader</span><span class="p">()</span>
<span class="n">reader</span><span class="p">.</span><span class="n">InputFileName</span> <span class="o">=</span> <span class="sh">'</span><span class="s">path/to/mesh.vtp</span><span class="sh">'</span>
<span class="n">reader</span><span class="p">.</span><span class="nc">Execute</span><span class="p">()</span>

<span class="c1"># Extract the centerline
</span><span class="n">centerline</span> <span class="o">=</span> <span class="n">vmtkscripts</span><span class="p">.</span><span class="nf">vmtkCenterlines</span><span class="p">()</span>
<span class="n">centerline</span><span class="p">.</span><span class="n">Surface</span> <span class="o">=</span> <span class="n">reader</span><span class="p">.</span><span class="n">Surface</span>
<span class="n">centerline</span><span class="p">.</span><span class="nc">Execute</span><span class="p">()</span>

<span class="c1"># Save the centerline
</span><span class="n">writer</span> <span class="o">=</span> <span class="n">vmtkscripts</span><span class="p">.</span><span class="nf">vmtkSurfaceWriter</span><span class="p">()</span>
<span class="n">writer</span><span class="p">.</span><span class="n">Surface</span> <span class="o">=</span> <span class="n">centerline</span><span class="p">.</span><span class="n">Centerlines</span>
<span class="n">writer</span><span class="p">.</span><span class="n">OutputFileName</span> <span class="o">=</span> <span class="sh">'</span><span class="s">path/to/centerline.vtp</span><span class="sh">'</span>
<span class="n">writer</span><span class="p">.</span><span class="nc">Execute</span><span class="p">()</span>
</code></pre></div></div> <h3 id="7-multiprocessing">7. Multiprocessing</h3> <p>Multiprocessing is a built-in Python module that provides support for concurrent execution using processes. I use the <code class="language-plaintext highlighter-rouge">multiprocessing</code> module to parallelize computationally intensive tasks, such as image processing, data analysis, and model training. By distributing the workload across multiple processes, I can take advantage of multi-core processors and reduce the overall execution time of my research tasks. It is <em>super</em> easy to use and can be a huge time saver.</p> <p>Here is a code snippet showing how to use the <code class="language-plaintext highlighter-rouge">multiprocessing</code> module to parallelize a simple task:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">multiprocessing</span>

<span class="c1"># Define the task
</span><span class="k">def</span> <span class="nf">process_image</span><span class="p">(</span><span class="n">image_path</span><span class="p">):</span>
    <span class="c1"># Load and process the image
</span>    <span class="bp">...</span>

<span class="c1"># Create a pool of worker processes
</span><span class="n">pool</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="p">.</span><span class="nc">Pool</span><span class="p">()</span>

<span class="c1"># Process a list of images in parallel
</span><span class="n">image_paths</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">image1.jpg</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">image2.jpg</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">image3.jpg</span><span class="sh">'</span><span class="p">]</span>
<span class="n">pool</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="n">process_image</span><span class="p">,</span> <span class="n">image_paths</span><span class="p">)</span>

<span class="c1"># Close the pool of worker processes
</span><span class="n">pool</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
<span class="n">pool</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name>Numi Sveinsson Cepero</name></author><category term="python"/><summary type="html"><![CDATA[a list of my most used python packages]]></summary></entry><entry><title type="html">Hey there! Welcome to my blog</title><link href="https://numisveinsson.github.io/blog/2024/welcome/" rel="alternate" type="text/html" title="Hey there! Welcome to my blog"/><published>2024-03-03T00:00:00+00:00</published><updated>2024-03-03T00:00:00+00:00</updated><id>https://numisveinsson.github.io/blog/2024/welcome</id><content type="html" xml:base="https://numisveinsson.github.io/blog/2024/welcome/"><![CDATA[<h3 id="who-am-i">Who am I?</h3> <p>I am a graduate student at UC Berkeley studying Mechanical Engineering. I am passionate about using computational tools to solve problems in the medical field and elsewhere. I am currently particularly interested in the intersection of engineering and deep learning and healthcare.</p> <h3 id="what-is-this-blog-about">What is this blog about?</h3> <p>This blog is a collection of my thoughts, projects, and experiences. I hope to share my journey as a graduate student and the projects I work on.</p> <p>I wish to also share some technical tutorials and guides that I find useful. I hope to share some of the things I learn along the way.</p> <h3 id="what-can-you-expect-to-find-here">What can you expect to find here?</h3> <h4 id="coding-tutorials">Coding Tutorials</h4> <p>I mainly work with Python (and sometime Matlab) so most of the tutorials will be related to these languages. I will also share some of the tools and libraries I use.</p> <h4 id="specific-technical-posts">Specific Technical Posts</h4> <p>I will share technical posts about the projects I work on; which packages I use, and how I use them. Specifically, you will find posts about the following fields:</p> <ul> <li> <p>Geometric Modeling</p> </li> <li> <p>Computational Simulation (FEM, CFD)</p> </li> <li> <p>Medical Imaging Processing</p> </li> <li> <p>Machine Learning (Deep Learning)</p> </li> </ul> <h4 id="general-thoughts-about-graduate-school-education-and-engineering">General Thoughts About Graduate School, Education, and Engineering</h4> <p>I hope to share some of my thoughts on the graduate school experience, including tips and tricks I learn along the way. I also hope to share some of my thoughts on the engineering field and the education system. I would love to hear your thoughts on these topics as well.</p>]]></content><author><name>Numi Sveinsson Cepero</name></author><category term="general"/><summary type="html"><![CDATA[Big Picture for the Blog]]></summary></entry><entry><title type="html">Python 101 (2) Using Git</title><link href="https://numisveinsson.github.io/blog/2024/git/" rel="alternate" type="text/html" title="Python 101 (2) Using Git"/><published>2024-01-02T00:00:00+00:00</published><updated>2024-01-02T00:00:00+00:00</updated><id>https://numisveinsson.github.io/blog/2024/git</id><content type="html" xml:base="https://numisveinsson.github.io/blog/2024/git/"><![CDATA[<h2 id="getting-started-with-git-for-code-development">Getting Started with Git for Code Development</h2> <p>Git is a powerful version control system that helps developers manage and track changes in their codebase efficiently. Whether you’re working on a solo project or collaborating with a team, understanding the basics of Git is essential. In this blog post, we’ll cover the fundamental aspects of using Git for code development.</p> <h3 id="what-is-git">What is Git?</h3> <p>Git is a distributed version control system that allows developers to track changes in their codebase. It provides a reliable way to collaborate with others, revert to previous states, and manage multiple versions of a project simultaneously.</p> <h3 id="setting-up-git">Setting Up Git</h3> <p>Before you start using Git, make sure it’s installed on your machine. You can download and install Git from the <a href="https://git-scm.com/">official Git website</a>.</p> <p>Once installed, configure your identity using the following commands:</p> <d-code block="" language="bash"> git config --global user.name "Your Name" git config --global user.email "your.email@example.com" </d-code> <p>Replace “Your Name” and “your.email@example.com” with your name and email address.</p> <h3 id="initializing-a-git-repository">Initializing a Git Repository</h3> <p>To start using Git in a project, you need to initialize a Git repository. Navigate to your project directory in the terminal and run:</p> <d-code block="" language="bash"> git init </d-code> <p>This command initializes a new Git repository in your project folder.</p> <h3 id="staging-changes">Staging Changes</h3> <p>Git has a staging area that allows you to select which changes to include in the next commit. Use the following commands to stage your changes:</p> <d-code block="" language="bash"> git add filename # Stage a specific file git add . # Stage all changes </d-code> <h3 id="committing-changes">Committing Changes</h3> <p>Once you’ve staged your changes, commit them to the repository:</p> <d-code block="" language="bash"> git commit -m "Your commit message here" </d-code> <p>Write a meaningful commit message describing the changes you made.</p> <h3 id="checking-repository-status">Checking Repository Status</h3> <p>To check the status of your repository and see which files have been modified, added, or deleted, use:</p> <d-code block="" language="bash"> git status </d-code> <h3 id="viewing-commit-history">Viewing Commit History</h3> <p>Reviewing the commit history is essential for tracking changes. Use the following command to view a list of commits:</p> <d-code block="" language="bash"> git log </d-code> <p>This will display a detailed log of all commits.</p> <h3 id="branching-in-git">Branching in Git</h3> <p>Branching is a powerful feature in Git that allows you to work on different features or bug fixes simultaneously. Create a new branch with:</p> <d-code block="" language="bash"> git branch branch_name </d-code> <p>Switch to the new branch:</p> <d-code block="" language="bash"> git checkout branch_name </d-code> <p>Or, combine both commands using:</p> <d-code block="" language="bash"> git checkout -b new_branch </d-code> <h3 id="merging-branches">Merging Branches</h3> <p>After working on a branch, you may want to merge it back into the main branch. Use the following commands:</p> <d-code block="" language="bash"> git checkout main # Switch to the main branch git merge branch_name # Merge the specified branch into main </d-code> <h3 id="conclusion">Conclusion</h3> <p>These are the most basic aspects of using Git for code development. As you become more familiar with Git, you can explore advanced features like Git remote, Git pull, and Git push. Remember to refer to the <a href="https://git-scm.com/doc">official Git documentation</a> for more in-depth information and guidance. Happy coding!</p>]]></content><author><name>Numi Sveinsson Cepero</name></author><category term="python"/><summary type="html"><![CDATA[using git to manage code development]]></summary></entry><entry><title type="html">Python 101 (1) Env Setup</title><link href="https://numisveinsson.github.io/blog/2023/conda/" rel="alternate" type="text/html" title="Python 101 (1) Env Setup"/><published>2023-12-22T00:00:00+00:00</published><updated>2023-12-22T00:00:00+00:00</updated><id>https://numisveinsson.github.io/blog/2023/conda</id><content type="html" xml:base="https://numisveinsson.github.io/blog/2023/conda/"><![CDATA[<h2 id="setting-up-a-python-environment-with-conda">Setting Up a Python Environment with Conda</h2> <p>Conda is a powerful package management and environment management system that makes it easy to manage Python environments and dependencies. Before we dive into using Conda, let’s understand the concept of a Python virtual environment.</p> <h3 id="what-is-a-python-virtual-environment">What is a Python Virtual Environment?</h3> <p>A Python virtual environment is a self-contained directory that contains its own Python interpreter and library installations. It allows you to isolate projects and their dependencies, preventing conflicts between different projects that may require different versions of packages.</p> <h3 id="why-use-conda">Why Use Conda?</h3> <p>Conda provides a convenient way to create, manage, and switch between Python environments. Here are some reasons why Conda is preferred:</p> <ul> <li><strong>Cross-Platform:</strong> Conda works seamlessly across different operating systems, making it easy to share environments and collaborate on projects.</li> <li><strong>Package Management:</strong> Conda simplifies package management by handling dependencies and ensuring compatibility between packages.</li> <li><strong>Ecosystem Support:</strong> Conda supports a wide range of packages and is not limited to Python. It can manage environments for different programming languages.</li> </ul> <h3 id="step-1---install-conda">Step 1 - Install Conda</h3> <p>If you haven’t installed Conda yet, you can download and install it by following the instructions on the <a href="https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html">official Conda website</a>.</p> <h3 id="step-2---open-a-terminal-or-command-prompt">Step 2 - Open a Terminal or Command Prompt</h3> <p>Open a terminal or command prompt on your system. This is where you will enter the Conda commands to create and manage Python environments.</p> <h3 id="step-3---create-a-new-python-environment">Step 3 - Create a New Python Environment</h3> <p>To create a new Python environment, use the following command:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">conda</span> <span class="nx">create</span> <span class="o">--</span><span class="nx">name</span> <span class="nx">myenv</span> <span class="nx">python</span><span class="o">=</span><span class="mf">3.8</span></code></pre></figure> <h3 id="step-4---activate-the-environment">Step 4 - Activate the Environment</h3> <p>Activate the newly created environment using the following command:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">conda</span> <span class="nx">activate</span> <span class="nx">myenv</span></code></pre></figure> <h3 id="step-5---install-packages-eg-pytorch">Step 5 - Install Packages (e.g., PyTorch)</h3> <p>Install packages into the newly created environment using, for example, the following command:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">conda</span> <span class="nx">install</span> <span class="nx">pytorch</span> <span class="nx">torchvision</span> <span class="nx">torchaudio</span> <span class="nx">cudatoolkit</span><span class="o">=</span><span class="mf">10.2</span> <span class="o">-</span><span class="nx">c</span> <span class="nx">pytorch</span></code></pre></figure> <h3 id="step-6---view-environments">Step 6 - View Environments</h3> <p>See all your environments using the following command:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">conda</span> <span class="nx">info</span> <span class="o">--</span><span class="nx">envs</span></code></pre></figure> <h3 id="step-7---deactivate-environment">Step 7 - Deactivate Environment</h3> <p>When you’re done working in the environment, deactivate it using the following command:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">conda</span> <span class="nx">deactivate</span></code></pre></figure> <p>That’s it! You’ve now covered the steps to activate, install packages, view/manage environments, and deactivate a Python environment using Conda. Feel free to use and customize this guide based on your specific needs.</p>]]></content><author><name>Numi Sveinsson Cepero</name></author><category term="python"/><summary type="html"><![CDATA[setting up a python conda environment]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://numisveinsson.github.io/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post"/><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://numisveinsson.github.io/blog/2021/distill</id><content type="html" xml:base="https://numisveinsson.github.io/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="interactive-plots">Interactive Plots</h2> <p>You can add interative plots using plotly + iframes :framed_picture:</p> <div class="l-page"> <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>The plot must be generated separately and saved into an HTML file. To generate the plot that you see above, you can use the following code snippet:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
  <span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
  <span class="n">df</span><span class="p">,</span>
  <span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
  <span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
  <span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
  <span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <hr/> <h2 id="details-boxes">Details boxes</h2> <p>Details boxes are collapsible boxes which hide additional information from the user. They can be added with the <code class="language-plaintext highlighter-rouge">details</code> liquid tag:</p> <details><summary>Click here to know more</summary> <p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p> </details> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li>Unordered list can use asterisks</li> <li>Or minuses</li> <li>Or pluses</li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><category term="distill"/><category term="formatting"/><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry></feed>